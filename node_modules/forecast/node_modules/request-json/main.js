// Generated by CoffeeScript 1.7.1
(function() {
  var buildOptions, clone, fs, merge, parseBody, request, url;

  request = require("request");

  fs = require("fs");

  url = require("url");

  clone = function(obj) {
    var key, result;
    result = {};
    for (key in obj) {
      result[key] = obj[key];
    }
    return result;
  };

  merge = function(obj1, obj2) {
    var key, result;
    result = clone(obj1);
    if (obj2 != null) {
      for (key in obj2) {
        result[key] = obj2[key];
      }
    }
    return result;
  };

  buildOptions = function(clientOptions, clientHeaders, host, path, requestOptions) {
    var options;
    if (requestOptions !== {}) {
      options = merge(clientOptions, requestOptions);
    }
    if ((requestOptions != null) && requestOptions !== {} && requestOptions.headers) {
      options.headers = merge(clientHeaders, requestOptions.headers);
    } else {
      options.headers = clientHeaders;
    }
    options.uri = url.resolve(host, path);
    return options;
  };

  parseBody = function(error, response, body, callback) {
    var err, parsed;
    if (typeof body === "string" && body !== "") {
      try {
        parsed = JSON.parse(body);
      } catch (_error) {
        err = _error;
        if (error == null) {
          error = new Error("Parsing error : " + err.message + ", body= \n " + body);
        }
        parsed = body;
      }
    } else {
      parsed = body;
    }
    return callback(error, response, parsed);
  };

  exports.newClient = function(url, options) {
    if (options == null) {
      options = {};
    }
    return new exports.JsonClient(url, options);
  };

  exports.JsonClient = (function() {
    function JsonClient(host, options) {
      var _ref;
      this.host = host;
      this.options = options != null ? options : {};
      this.headers = (_ref = this.options.headers) != null ? _ref : {};
      this.headers['accept'] = 'application/json';
      this.headers['user-agent'] = "request-json/1.0";
    }

    JsonClient.prototype.setBasicAuth = function(username, password) {
      var basicCredentials, credentials;
      credentials = "" + username + ":" + password;
      basicCredentials = new Buffer(credentials).toString('base64');
      return this.headers["authorization"] = "Basic " + basicCredentials;
    };

    JsonClient.prototype.setToken = function(token) {
      return this.headers["x-auth-token"] = token;
    };

    JsonClient.prototype.get = function(path, options, callback, parse) {
      var opts;
      if (parse == null) {
        parse = true;
      }
      if (typeof options === 'function') {
        if (typeof callback === 'boolean') {
          parse = callback;
        }
        callback = options;
        options = {};
      }
      opts = buildOptions(this.options, this.headers, this.host, path, options);
      opts.method = 'GET';
      return request(opts, function(error, response, body) {
        if (parse) {
          return parseBody(error, response, body, callback);
        } else {
          return callback(error, response, body);
        }
      });
    };

    JsonClient.prototype.post = function(path, json, options, callback, parse) {
      var opts;
      if (parse == null) {
        parse = true;
      }
      if (typeof options === 'function') {
        if (typeof callback === 'boolean') {
          parse = callback;
        }
        callback = options;
        options = {};
      }
      opts = buildOptions(this.options, this.headers, this.host, path, options);
      opts.method = "POST";
      opts.json = json;
      return request(opts, function(error, response, body) {
        if (parse) {
          return parseBody(error, response, body, callback);
        } else {
          return callback(error, response, body);
        }
      });
    };

    JsonClient.prototype.put = function(path, json, options, callback, parse) {
      var opts;
      if (parse == null) {
        parse = true;
      }
      if (typeof options === 'function') {
        if (typeof callback === 'boolean') {
          parse = callback;
        }
        callback = options;
        options = {};
      }
      opts = buildOptions(this.options, this.headers, this.host, path, options);
      opts.method = "PUT";
      opts.json = json;
      return request(opts, function(error, response, body) {
        if (parse) {
          return parseBody(error, response, body, callback);
        } else {
          return callback(error, response, body);
        }
      });
    };

    JsonClient.prototype.patch = function(path, json, options, callback, parse) {
      var opts;
      if (parse == null) {
        parse = true;
      }
      if (typeof options === 'function') {
        if (typeof callback === 'boolean') {
          parse = callback;
        }
        callback = options;
        options = {};
      }
      opts = buildOptions(this.options, this.headers, this.host, path, options);
      opts.method = "PATCH";
      opts.json = json;
      return request(opts, function(error, response, body) {
        if (parse) {
          return parseBody(error, response, body, callback);
        } else {
          return callback(error, response, body);
        }
      });
    };

    JsonClient.prototype.del = function(path, callback, parse) {
      var options, opts;
      if (parse == null) {
        parse = true;
      }
      if (typeof options === 'function') {
        if (typeof callback === 'boolean') {
          parse = callback;
        }
        callback = options;
        options = {};
      }
      opts = buildOptions(this.options, this.headers, this.host, path, options);
      opts.method = "DELETE";
      return request(opts, function(error, response, body) {
        if (parse) {
          return parseBody(error, response, body, callback);
        } else {
          return callback(error, response, body);
        }
      });
    };

    JsonClient.prototype.sendFile = function(path, files, data, callback) {
      var att, file, form, index, req, _i, _len, _results;
      if (typeof data === "function") {
        callback = data;
      }
      req = this.post(path, null, callback, false);
      form = req.form();
      if (typeof data !== "function") {
        for (att in data) {
          form.append(att, data[att]);
        }
      }
      if (typeof files === "string") {
        return form.append("file", fs.createReadStream(files));
      } else if (!Array.isArray(files)) {
        return form.append("file", files);
      } else {
        index = 0;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          index++;
          if (typeof file === "string") {
            _results.push(form.append("file" + index, fs.createReadStream(file)));
          } else {
            _results.push(form.append("file" + index, file));
          }
        }
        return _results;
      }
    };

    JsonClient.prototype.saveFile = function(path, filePath, callback) {
      var stream;
      stream = this.get(path, callback, false);
      return stream.pipe(fs.createWriteStream(filePath));
    };

    JsonClient.prototype.saveFileAsStream = function(path, callback) {
      return this.get(path, callback, false);
    };

    return JsonClient;

  })();

}).call(this);
